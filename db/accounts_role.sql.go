// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: accounts_role.sql

package db

import (
	"context"
)

const roleCreateUpdate = `-- name: RoleCreateUpdate :one
select  
	role_id ,
	role_name ,
	role_description ,
	created_at ,
	updated_at ,
	deleted_at from accounts_schema.role_create_update(

in_role_id => $1,
in_role_name => $2,
in_role_description => $3,
in_permissions => $4::int[]
)
`

type RoleCreateUpdateParams struct {
	RoleID          int32   `json:"role_id"`
	RoleName        string  `json:"role_name"`
	RoleDescription string  `json:"role_description"`
	Permissions     []int32 `json:"permissions"`
}

func (q *Queries) RoleCreateUpdate(ctx context.Context, arg RoleCreateUpdateParams) (AccountsSchemaRole, error) {
	row := q.db.QueryRow(ctx, roleCreateUpdate,
		arg.RoleID,
		arg.RoleName,
		arg.RoleDescription,
		arg.Permissions,
	)
	var i AccountsSchemaRole
	err := row.Scan(
		&i.RoleID,
		&i.RoleName,
		&i.RoleDescription,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const rolesDeleteRestore = `-- name: RolesDeleteRestore :exec
UPDATE
    accounts_schema.roles
SET
    deleted_at = IIF(deleted_at IS NULL, now(), NULL)
WHERE
    role_id = ANY ($1::int[])
`

func (q *Queries) RolesDeleteRestore(ctx context.Context, records []int32) error {
	_, err := q.db.Exec(ctx, rolesDeleteRestore, records)
	return err
}

const rolesList = `-- name: RolesList :many
select  
	role_id ,
	role_name ,
	role_description ,
	created_at ,
	updated_at ,
	deleted_at from accounts_schema.roles
`

func (q *Queries) RolesList(ctx context.Context) ([]AccountsSchemaRole, error) {
	rows, err := q.db.Query(ctx, rolesList)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []AccountsSchemaRole{}
	for rows.Next() {
		var i AccountsSchemaRole
		if err := rows.Scan(
			&i.RoleID,
			&i.RoleName,
			&i.RoleDescription,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
